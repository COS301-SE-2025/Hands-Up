name: Integration Tests

on:
  pull_request:
    branches: [main, dev]
  push:
    branches: [main, dev, test/automated]

permissions:
  contents: read

jobs:
  run-cypress-tests:
    name: Cypress Integration Tests
    runs-on: ubuntu-latest
    
    env:
      # Database environment variables
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASS: ${{ secrets.DB_PASS }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_HOST: localhost
      DB_PORT: 5432
      
      # API environment variables (if needed)
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      API_PORT: 2000
      
      # Frontend environment variables (if any)
      REACT_APP_API_URL: http://localhost:2000
      REACT_APP_TESTING_ENVIRONMENT: true
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22

      # Install docker-compose for database
      - name: Install docker-compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Create .env file for database
      - name: Create .env file
        run: |
          echo "DB_USER=${{ secrets.DB_USER }}" > .env
          echo "DB_PASS=${{ secrets.DB_PASS }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_HOST=localhost" >> .env
          echo "DB_PORT=5432" >> .env

      # Start database
      - name: Start database
        run: |
          cd backend/database
          docker-compose up -d --build
          echo "Waiting for database to be ready..."
          sleep 30

      # Wait for database to be healthy
      - name: Wait for database to be ready
        run: |
          timeout 60 bash -c 'until docker-compose -f backend/database/docker-compose.yml exec -T db pg_isready -U ${{ secrets.DB_USER }} -d ${{ secrets.DB_NAME }}; do sleep 2; done'

      # Run database migrations
      - name: Run database migrations
        run: |
          cd backend/database
          docker-compose run --rm \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASS=${{ secrets.DB_PASS }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e DB_HOST=db \
            -e DB_PORT=5432 \
            flyway migrate

      # Install backend dependencies
      - name: Install backend dependencies
        run: |
          cd backend/api
          npm ci

      # Install frontend dependencies
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      # Install root dependencies (for Cypress)
      - name: Install root dependencies
        run: npm ci

      # Start backend API
      - name: Start backend API
        run: |
          cd backend/api
          node handsUP &
          echo "Backend API started"
        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_HOST: localhost
          DB_PORT: 5432
          JWT_SECRET: ${{ secrets.JWT_SECRET }}

      # Start frontend application
      - name: Start frontend application
        run: |
          cd frontend
          npm start &
          echo "Frontend started"
        env:
          REACT_APP_API_URL: http://localhost:2000
          REACT_APP_TESTING_ENVIRONMENT: true

      # Wait for both services to be ready
      - name: Wait for services to be ready
        run: |
          npx wait-on http://localhost:3000 http://localhost:2000/health --timeout 120000
          echo "All services are ready"

      # Run Cypress tests
      - name: Run Cypress tests
        run: |
          npx cypress run
        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_NAME: ${{ secrets.DB_NAME }}
          REACT_APP_API_URL: http://localhost:2000

      # Optional: Upload Cypress videos/screenshots on failure
      - name: Upload Cypress artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-artifacts
          path: |
            cypress/videos
            cypress/screenshots
          retention-days: 7