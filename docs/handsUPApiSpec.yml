openapi: 3.0.3
info:
  title: Hands Up - OpenAPI 3.0
  description: |-
   This is a simple service contract for HandsUp API.
  contact:
    email: tmkdt.cos301@gmail.com
  version: 1.0.0
servers:
  - url: http://localhost:2000/handsup 

tags:
  - name: user
    description: Operations about user
  - name: learning
    description: Operations about learning 

paths:
  /user/register:
    post:
      tags:
        - user
      summary: Register a new user
      description: Create a new user in the system
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "johndoe"
                name:
                  type: string
                  example: "john"
                surname:
                  type: string
                  example: "doe"
                email:
                  type: string
                  example: "johndoe@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        '201':
          $ref: '#/components/responses/successPostResponse'
        '500':
          $ref: '#/components/responses/internalServerError'

    
  /user/login:
    post:
      tags:
        - user
      summary: User login
      description: Authenticate a user and possibly return a token for future requests
      operationId: userLogin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "johndoe"
                password:
                  type: string
                  example: "password123"
      responses:
        '200':
          $ref: '#/components/responses/successPostResponse'
        '400':
          $ref: '#/components/responses/notFoundResponse'
        '401':
          $ref: '#/components/responses/authFailedResponse'
        '500':
          $ref: '#/components/responses/internalServerError'


  /user/logout:
    post:
      tags:
        - user
      summary: User logout
      description: Invalidate the user's token
      operationId: userLogout
      responses:
        '200':
          $ref: '#/components/responses/successPostResponse'
        '401':
          $ref: '#/components/responses/authFailedResponse'
        '500':
          $ref: '#/components/responses/internalServerError'


  /user/{username}:
    get:
      tags:
        - user
      summary: Get user details
      description: Retrieve user information
      operationId: getUserInfo
      parameters:
        - name: username
          in: path
          required: true
          description: The username of the user to retrieve information for
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/successUserResponse'
        '400':
          $ref: '#/components/responses/notFoundResponse'
        '500':
          $ref: '#/components/responses/internalServerError'


  /learning/progress/{username}:
    get:
      tags:
        - learning
      summary: Get learning progress
      description: Retrieve stats about the user's learning progress
      operationId: learningProgress
      parameters:
        - name: username
          in: path
          required: true
          description: The username of the user to retrieve progress for
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/successStatsResponse'
        '400':
          $ref: '#/components/responses/notFoundResponse'
        '404':
          $ref: '#/components/responses/badRequestResponse'
        '500':
          $ref: '#/components/responses/internalServerError'

  /learning/lessons/{username}:
    put:
      tags:
        - learning
      summary: Update learning progress
      description: Update the user's learning progress with completed lessons, streak, etc
      operationId: updateLearningProgress
      parameters:
        - name: username
          in: path
          required: true
          description: The username of the user to update progress for
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lessonsCompleted:
                  type: integer
                  example: 10
                streak:
                  type: integer
                  example: 2
                signsLearned:
                  type: integer
                  example: 5
                currentLevel:
                  type: string
                  example: "Bronze"
      responses:
        '200':
          $ref: '#/components/responses/successPostResponse'
        '400':
          $ref: '#/components/responses/notFoundResponse'
        '404':
          $ref: '#/components/responses/badRequestResponse'
        '500':
          $ref: '#/components/responses/internalServerError'

components:
  responses:
    internalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Internal server error"

    successStatsResponse:
      description: Operation was successful
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "Retrieval completed successfully"
              data:
                type: array
                items:
                  type: object
                  properties:
                    lessonsCompleted:
                      type: integer
                      example: 10
                    difficultyLevel:
                      type: integer
                      example: 2
    authFailedResponse:
      description: Authentication failed
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Authentication failed"

    notFoundResponse:
      description: User not found
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Resource not found"

    successPostResponse:
      description: Operation was successful
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "Operation completed successfully"

    successUserResponse:
      description: Operation was successful
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "Operation completed successfully"
              data:
                type: array
                example:
                  - id: 1
                    name: "John Doe"
                    email: "john.doe@example.com"
                  - id: 2
                    name: "Jane Smith"
                    email: "jane.smith@example.com"

    badRequestResponse:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Bad request"
